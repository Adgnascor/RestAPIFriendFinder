// <auto-generated />
using System;
using FriendFinderAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FriendFinderAPI.Migrations
{
    [DbContext(typeof(FriendFinderContext))]
    [Migration("20200604193606_RemoveForiegnKeyIdAndAddVirtualKeyword")]
    partial class RemoveForiegnKeyIdAndAddVirtualKeyword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FriendFinderAPI.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityCountry = "Sverige",
                            CityCounty = "Västra Götaland",
                            CityName = "Göteborg"
                        },
                        new
                        {
                            CityId = 2,
                            CityCountry = "Sverige",
                            CityCounty = "Stockholm",
                            CityName = "Stockholm"
                        },
                        new
                        {
                            CityId = 3,
                            CityCountry = "Sverige",
                            CityCounty = "Skåne",
                            CityName = "Malmö"
                        },
                        new
                        {
                            CityId = 4,
                            CityCountry = "Norge",
                            CityCounty = "Oslo",
                            CityName = "Oslo"
                        },
                        new
                        {
                            CityId = 5,
                            CityCountry = "Danmark",
                            CityCounty = "Köpenhamn",
                            CityName = "Köpenhamn"
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EventStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HobbyId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CityId");

                    b.HasIndex("HobbyId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CityId = 1,
                            EventEnd = new DateTime(2020, 10, 6, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "3D Print Workshop",
                            EventStart = new DateTime(2020, 10, 6, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HobbyId = 1
                        },
                        new
                        {
                            EventId = 2,
                            CityId = 1,
                            EventEnd = new DateTime(2020, 11, 14, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Beginners Acting Club",
                            EventStart = new DateTime(2020, 11, 14, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            HobbyId = 2
                        },
                        new
                        {
                            EventId = 3,
                            CityId = 2,
                            EventEnd = new DateTime(2020, 12, 10, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Amatuer Airsoft Mayhem",
                            EventStart = new DateTime(2020, 12, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HobbyId = 4
                        },
                        new
                        {
                            EventId = 4,
                            CityId = 3,
                            EventEnd = new DateTime(2020, 7, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Malmö for Biathlon in the World",
                            EventStart = new DateTime(2020, 7, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            HobbyId = 8
                        },
                        new
                        {
                            EventId = 5,
                            CityId = 4,
                            EventEnd = new DateTime(2020, 11, 20, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Nightime in Oslo with The Stars",
                            EventStart = new DateTime(2020, 11, 20, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HobbyId = 6
                        },
                        new
                        {
                            EventId = 6,
                            CityId = 5,
                            EventEnd = new DateTime(2020, 10, 4, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Danske Ølefest me Beer Pong",
                            EventStart = new DateTime(2020, 10, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HobbyId = 7
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.EventUser", b =>
                {
                    b.Property<int>("EventUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("UserIsResponsible")
                        .HasColumnType("bit");

                    b.HasKey("EventUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUsers");

                    b.HasData(
                        new
                        {
                            EventUserId = 1,
                            EventId = 1,
                            UserId = 1,
                            UserIsResponsible = true
                        },
                        new
                        {
                            EventUserId = 2,
                            EventId = 1,
                            UserId = 2,
                            UserIsResponsible = false
                        },
                        new
                        {
                            EventUserId = 3,
                            EventId = 3,
                            UserId = 3,
                            UserIsResponsible = true
                        },
                        new
                        {
                            EventUserId = 4,
                            EventId = 3,
                            UserId = 4,
                            UserIsResponsible = false
                        },
                        new
                        {
                            EventUserId = 5,
                            EventId = 4,
                            UserId = 5,
                            UserIsResponsible = true
                        },
                        new
                        {
                            EventUserId = 6,
                            EventId = 4,
                            UserId = 6,
                            UserIsResponsible = false
                        },
                        new
                        {
                            EventUserId = 7,
                            EventId = 5,
                            UserId = 7,
                            UserIsResponsible = true
                        },
                        new
                        {
                            EventUserId = 8,
                            EventId = 5,
                            UserId = 8,
                            UserIsResponsible = false
                        },
                        new
                        {
                            EventUserId = 9,
                            EventId = 6,
                            UserId = 9,
                            UserIsResponsible = true
                        },
                        new
                        {
                            EventUserId = 10,
                            EventId = 6,
                            UserId = 10,
                            UserIsResponsible = false
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Hobby", b =>
                {
                    b.Property<int>("HobbyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HobbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HobbyId");

                    b.ToTable("Hobbies");

                    b.HasData(
                        new
                        {
                            HobbyId = 1,
                            HobbyName = "3D printing"
                        },
                        new
                        {
                            HobbyId = 2,
                            HobbyName = "Acting"
                        },
                        new
                        {
                            HobbyId = 3,
                            HobbyName = "Adventure racing"
                        },
                        new
                        {
                            HobbyId = 4,
                            HobbyName = "Airsoft"
                        },
                        new
                        {
                            HobbyId = 5,
                            HobbyName = "Alpine skiing"
                        },
                        new
                        {
                            HobbyId = 6,
                            HobbyName = "Amateur Astronomy"
                        },
                        new
                        {
                            HobbyId = 7,
                            HobbyName = "Beer Pong"
                        },
                        new
                        {
                            HobbyId = 8,
                            HobbyName = "Biathlon"
                        },
                        new
                        {
                            HobbyId = 9,
                            HobbyName = "Bird watching"
                        },
                        new
                        {
                            HobbyId = 10,
                            HobbyName = "Brännboll"
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyLocation", b =>
                {
                    b.Property<int>("HobbyLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HobbyId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("HobbyLocationId");

                    b.HasIndex("HobbyId");

                    b.HasIndex("LocationId");

                    b.ToTable("HobbyLocations");

                    b.HasData(
                        new
                        {
                            HobbyLocationId = 1,
                            HobbyId = 1,
                            LocationId = 1
                        },
                        new
                        {
                            HobbyLocationId = 2,
                            HobbyId = 2,
                            LocationId = 2
                        },
                        new
                        {
                            HobbyLocationId = 3,
                            HobbyId = 4,
                            LocationId = 3
                        },
                        new
                        {
                            HobbyLocationId = 4,
                            HobbyId = 6,
                            LocationId = 6
                        },
                        new
                        {
                            HobbyLocationId = 5,
                            HobbyId = 7,
                            LocationId = 9
                        },
                        new
                        {
                            HobbyLocationId = 6,
                            HobbyId = 8,
                            LocationId = 6
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyUser", b =>
                {
                    b.Property<int>("HobbyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HobbyId")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HobbyUserId");

                    b.HasIndex("HobbyId");

                    b.HasIndex("UserId");

                    b.ToTable("HobbyUsers");

                    b.HasData(
                        new
                        {
                            HobbyUserId = 1,
                            HobbyId = 1,
                            SkillLevel = 3,
                            UserId = 1
                        },
                        new
                        {
                            HobbyUserId = 2,
                            HobbyId = 1,
                            SkillLevel = 1,
                            UserId = 2
                        },
                        new
                        {
                            HobbyUserId = 3,
                            HobbyId = 3,
                            SkillLevel = 2,
                            UserId = 3
                        },
                        new
                        {
                            HobbyUserId = 4,
                            HobbyId = 3,
                            SkillLevel = 0,
                            UserId = 4
                        },
                        new
                        {
                            HobbyUserId = 5,
                            HobbyId = 8,
                            SkillLevel = 1,
                            UserId = 5
                        },
                        new
                        {
                            HobbyUserId = 6,
                            HobbyId = 8,
                            SkillLevel = 0,
                            UserId = 6
                        },
                        new
                        {
                            HobbyUserId = 7,
                            HobbyId = 6,
                            SkillLevel = 0,
                            UserId = 7
                        },
                        new
                        {
                            HobbyUserId = 8,
                            HobbyId = 6,
                            SkillLevel = 2,
                            UserId = 8
                        },
                        new
                        {
                            HobbyUserId = 9,
                            HobbyId = 7,
                            SkillLevel = 2,
                            UserId = 9
                        },
                        new
                        {
                            HobbyUserId = 10,
                            HobbyId = 7,
                            SkillLevel = 1,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("CityId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            CityId = 1,
                            LocationName = "Chalmers Tekniska Högskola"
                        },
                        new
                        {
                            LocationId = 2,
                            CityId = 1,
                            LocationName = "Haga Teatern"
                        },
                        new
                        {
                            LocationId = 3,
                            CityId = 2,
                            LocationName = "Skansen"
                        },
                        new
                        {
                            LocationId = 4,
                            CityId = 2,
                            LocationName = "Södermalm"
                        },
                        new
                        {
                            LocationId = 5,
                            CityId = 3,
                            LocationName = "Stora Torget"
                        },
                        new
                        {
                            LocationId = 6,
                            CityId = 3,
                            LocationName = "Triangeln"
                        },
                        new
                        {
                            LocationId = 7,
                            CityId = 4,
                            LocationName = "Kampen"
                        },
                        new
                        {
                            LocationId = 8,
                            CityId = 4,
                            LocationName = "Domkirke"
                        },
                        new
                        {
                            LocationId = 9,
                            CityId = 5,
                            LocationName = "Nyhavn"
                        },
                        new
                        {
                            LocationId = 10,
                            CityId = 5,
                            LocationName = "Nytorv"
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("UserAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAge")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CityId = 1,
                            UserAdress = "Drottninggatan 2",
                            UserAge = 20,
                            UserName = "Sebbe Persson",
                            UserPhoneNumber = "+46XXXXXXX"
                        },
                        new
                        {
                            UserId = 2,
                            CityId = 5,
                            UserAdress = "Knudsgate 15",
                            UserAge = 22,
                            UserName = "Peder Åborg",
                            UserPhoneNumber = "+45XXXXXXX1"
                        },
                        new
                        {
                            UserId = 3,
                            CityId = 3,
                            UserAdress = "Karl Andersgatan 6",
                            UserAge = 24,
                            UserName = "Petra Levinman",
                            UserPhoneNumber = "+46XXXXXXX2"
                        },
                        new
                        {
                            UserId = 4,
                            CityId = 4,
                            UserAdress = "Beringsväg 10",
                            UserAge = 25,
                            UserName = "Pontus Bergman",
                            UserPhoneNumber = "+47XXXXXXX3"
                        },
                        new
                        {
                            UserId = 5,
                            CityId = 4,
                            UserAdress = "Kongasnåret 1",
                            UserAge = 43,
                            UserName = "Olle Kvist",
                            UserPhoneNumber = "+47XXXXXXX4"
                        },
                        new
                        {
                            UserId = 6,
                            CityId = 5,
                            UserAdress = "Gregorstande 6",
                            UserAge = 32,
                            UserName = "Christina Kerlpalm",
                            UserPhoneNumber = "+45XXXXXXX5"
                        },
                        new
                        {
                            UserId = 7,
                            CityId = 1,
                            UserAdress = "Kungsportsavenyn 3",
                            UserAge = 34,
                            UserName = "Osborn Börjesson",
                            UserPhoneNumber = "+46XXXXXXX6"
                        },
                        new
                        {
                            UserId = 8,
                            CityId = 2,
                            UserAdress = "Djurgårdsvägen 21",
                            UserAge = 26,
                            UserName = "Pelle Plutter",
                            UserPhoneNumber = "+46XXXXXXX7"
                        },
                        new
                        {
                            UserId = 9,
                            CityId = 2,
                            UserAdress = "Vättlegatan 2",
                            UserAge = 27,
                            UserName = "Ina Pålström",
                            UserPhoneNumber = "+46XXXXXXX8"
                        },
                        new
                        {
                            UserId = 10,
                            CityId = 3,
                            UserAdress = "Opalgatan 54",
                            UserAge = 28,
                            UserName = "William Morberg",
                            UserPhoneNumber = "+46XXXXXXX9"
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Event", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("FriendFinderAPI.Models.Hobby", "Hobby")
                        .WithMany()
                        .HasForeignKey("HobbyId");
                });

            modelBuilder.Entity("FriendFinderAPI.Models.EventUser", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId");

                    b.HasOne("FriendFinderAPI.Models.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyLocation", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.Hobby", "Hobby")
                        .WithMany("HobbyLocations")
                        .HasForeignKey("HobbyId");

                    b.HasOne("FriendFinderAPI.Models.Location", "Location")
                        .WithMany("HobbyLocations")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyUser", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.Hobby", "Hobby")
                        .WithMany("HobbyUsers")
                        .HasForeignKey("HobbyId");

                    b.HasOne("FriendFinderAPI.Models.User", "User")
                        .WithMany("HobbyUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Location", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("FriendFinderAPI.Models.User", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");
                });
#pragma warning restore 612, 618
        }
    }
}
