// <auto-generated />
using FriendFinderAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FriendFinderAPI.Migrations
{
    [DbContext(typeof(FriendFinderContext))]
    [Migration("20200528075525_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FriendFinderAPI.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityCountry = "Andorra",
                            CityCounty = "Andorra la Vella",
                            CityName = "Andorra la Vella"
                        },
                        new
                        {
                            CityId = 2,
                            CityCountry = "United Arab Emirates",
                            CityCounty = "Umm al Qaywayn",
                            CityName = "Umm al Qaywayn"
                        },
                        new
                        {
                            CityId = 3,
                            CityCountry = "United Arab Emirates",
                            CityCounty = "Raʼs al Khaymah",
                            CityName = "Ras al-Khaimah"
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CityId");

                    b.HasIndex("HobbyId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CityId = 1,
                            EventName = "Lets Do some Awsome Curling",
                            HobbyId = 2
                        },
                        new
                        {
                            EventId = 2,
                            CityId = 2,
                            EventName = "BookClub All About The Books",
                            HobbyId = 1
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.EventUser", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EventUserId")
                        .HasColumnType("int");

                    b.Property<bool>("UserIsResponsible")
                        .HasColumnType("bit");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUsers");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            UserId = 2,
                            EventUserId = 1,
                            UserIsResponsible = true
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 1,
                            EventUserId = 2,
                            UserIsResponsible = false
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Hobby", b =>
                {
                    b.Property<int>("HobbyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HobbyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HobbyId");

                    b.ToTable("Hobbies");

                    b.HasData(
                        new
                        {
                            HobbyId = 1,
                            HobbyName = "Abseiling"
                        },
                        new
                        {
                            HobbyId = 2,
                            HobbyName = "Acting"
                        },
                        new
                        {
                            HobbyId = 3,
                            HobbyName = "Action figure"
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyLocation", b =>
                {
                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("HobbyId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("HobbyLocations");

                    b.HasData(
                        new
                        {
                            HobbyId = 1,
                            LocationId = 1
                        },
                        new
                        {
                            HobbyId = 2,
                            LocationId = 2
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyUser", b =>
                {
                    b.Property<int>("HobbyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.HasKey("HobbyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("HobbyUsers");

                    b.HasData(
                        new
                        {
                            HobbyId = 1,
                            UserId = 1,
                            SkillLevel = 0
                        },
                        new
                        {
                            HobbyId = 2,
                            UserId = 2,
                            SkillLevel = 1
                        },
                        new
                        {
                            HobbyId = 3,
                            UserId = 3,
                            SkillLevel = 3
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("CityId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            CityId = 2,
                            LocationName = "Fjäderborgen"
                        },
                        new
                        {
                            LocationId = 2,
                            CityId = 1,
                            LocationName = "The Castle With Zero Books..."
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("UserAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAge")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CityId = 2,
                            UserAdress = "Drottninggatan",
                            UserAge = 20,
                            UserName = "Sebbe",
                            UserPhoneNumber = "+46XXXXXXX"
                        },
                        new
                        {
                            UserId = 2,
                            CityId = 1,
                            UserAdress = "Kungsgatan",
                            UserAge = 22,
                            UserName = "Oskar",
                            UserPhoneNumber = "+46XXXXXXX2"
                        },
                        new
                        {
                            UserId = 3,
                            CityId = 1,
                            UserAdress = "MorTest",
                            UserAge = 28,
                            UserName = "William",
                            UserPhoneNumber = "+46XXXXXXX3"
                        });
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Event", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendFinderAPI.Models.Hobby", "Hobby")
                        .WithMany()
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FriendFinderAPI.Models.EventUser", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendFinderAPI.Models.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyLocation", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.Hobby", "Hobby")
                        .WithMany("HobbyLocations")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendFinderAPI.Models.Location", "Location")
                        .WithMany("HobbyLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FriendFinderAPI.Models.HobbyUser", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.Hobby", "Hobby")
                        .WithMany("HobbyUsers")
                        .HasForeignKey("HobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FriendFinderAPI.Models.User", "User")
                        .WithMany("HobbyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FriendFinderAPI.Models.Location", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FriendFinderAPI.Models.User", b =>
                {
                    b.HasOne("FriendFinderAPI.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
